Browser Architecture
====================
Browser is a collection of different software components together. Below are some components,
- Browser Engine, Rendering Engine. Ex: Blink, Webkit, Gecko, Trident etc...
- Javascript Engine. Ex: V8, SpiderMonkey, Chakra etc...
- Networking component
- Data storage component
- XML parsing component
- Plugin handling component

In a browser Javascript is interpreted by Javascript Engine and HTML, CSS is parsed by Browser Engine.

For chrome browser, Javascript engine is V8 and Browser engine is Blink. 

JavaScript RunTime
==================

--------------------------------------------------
|          System Memory - RAM - 8GB             |
| ---------------------------------------------- |
| |      Chrome Browser(V8) - 1GB Allocated    | |
| | ------------------------------------------ | |
| | | ------------------  ------------------ | | |
| | | |                |  |                | | | |
| | | | Page 1 - 25MB  |  | Page 2 - 25MB  | | | |
| | | |   x, y, z      |  |                | | | |
| | | ------------------  ------------------ | | |
| | ------------------------------------------ | |
| ---------------------------------------------- |
--------------------------------------------------

We can access the page runtime from browser console. We can access the existing variables, objects, arrays etc.. available in page runtime and also we can modify them through console.

So, there is no difference in between running script from page or through console.
Ex: temp.html

While executing code through console, to go to next line use Shift + Enter. If you hit enter, it will execute the code.

<script>
  var x = 10, y = 20, z = 30;
  console.log(x);
  console.log(y);
  console.log(z);
</script>

JavaScript Versions
===================
ECMAScript is javascript language specification. 
 
Ecma International is the organization defining the specification. 

https://www.ecma-international.org/ecma-262/

Javascript engines implement those features by following ECMA specifications.

ES5 
- Released in 2009
- Supported by all the browsers.

ES6 / ECMAScript 2015 
- Most of the features supported by latest browsers.
- Few features are still not yet supported by browsers.
- Most of the javascript latest features we are using today belong to ES6.
- All Javascript frameworks are using ES6 features throughly.
- Learning ES6 features is very important to understand latest frameworks.

ES7 / ECMAScript 2016
- Currently, chrome and opera supporting ES7 features.
- These features are not yet fully adopted by the community.

ES8 / ECMAScript 2017, ES9 / ECMAScript 2018, ES10 / ECMAScript 2019, ES11 / ECMAScript 2020 specifications were released. Browsers are trying to bring those features. It will take some time.

Currently, Javascript community is using ES6 features throughly, because of browser support.  

Variables
=========
var x; 
 
var x, y, z; 
 
Initial value is “undefined”. 
 
Assign value: x = 5; 
 
Assign while defining var x = 5, y = 10; 
 
Variable name must start with $, _ or an alphabet. 
 
Js is case sensitive. “test” and “Test” are two different variables. 
 
var, function, return, class etc... are reserved words. 

Data types
==========
Javascript is a weekly typed language – we can assign any type of value to any type of variable.

var message = "hello";
message = 123456; // no error

JavaScript is dynamically typed language. Depends on context it will decide the data type.
Ex: 10 - '2' = 8

7 kinds of data types
---------------------
'number' for any kind of numbers: integer or floating-point.
'string' for strings. A string may have one or more characters, there’s no separate single-character type.
'boolean' for true/false.
'undefined' for unassigned values – a standalone type that has a single value undefined. Existing but no value.
'null' for unknown values – a standalone type that has a single value null. Reference of non-existing value.
'object' for more complex data structures. object, array, function belong to object datatype.
'symbol' for unique identifiers.

typeof operator
===============
typeof is used to check the datatype of variable.

typeof undefined // "undefined" 

typeof 0    // "number" 
 
typeof true // "boolean" 

typeof "foo" // "string" 

typeof {} // "object" 

typeof function(){} // "function". There is no function data type. It comes under object type. But, typeof operator returns it as function for better differentiation from objects.

typeof {} // 'object'
typeof [] // 'object' 

To check an array, we can use Array.isArray() method.
- Array.isArray([]) - true 
- Array.isArray({}) - false

typeof new Date() // 'object'

typeof "test" // string
typeof new String("test") // object

typeof Symbol("id") // "symbol"

Numbers
=======
Numbers in javascript range from 'Infinity' to '-Infinity'.
1/0 // Infinity
-1/0 // -Infinity

NaN - Not a Number
- Javascript will return NaN when it failed to do mathematical calculation
0 / 0 - NaN

NaN is not equal to anything, including itself. 
NaN == NaN // false

So, we can't write checking conditions like below,
var a = 'abc'/10;
if(a == NaN) { //some code } 

Using isNaN() method we can check whether a value is NaN or not. 
isNaN(0/0); // true
isNaN(10/5); // false

parseInt('12px'); // 12. Used to parse strings to numbers.
parseInt('abc'); // NaN. If parsing failed, NaN will be returned.

parseFloat('12.3.4'); // 12.3 Used to parse strings to floating numbers.
parseFloat(''a.12.c''); // NaN. If parsing failed, NaN will be returned.

Except '+', other arithmetic operators automatically parse string to numbers. 
'+' operator is used for concatination as well.
10 / '2'  // 5
10 + 2    // 12
10 + '2'  // "102"

It's better to parse the values while doing mathematical operation.
10 - parseInt('2'); // 8

Math.floor
- Rounds number down

Math.ceil
- Rounds number up

Math.round
- Rounds number to nearest

Math.floor(3.1) // 3
Math.ceil(3.1)  // 4
Math.round(3.1) // 3
Math.round(3.5) // 4

var a = 12.34;
a.toFixed(1) // "12.3"

var a = 12.34;
a.toFixed(5) // "12.34000"

Math.random()

Strings
=======
We can use double quotes, single quotes or back ticks to define strings.

var text = "my value"; // double quotes 
var anotherText = 'another string'; // single quotes
var latestText = `string with back ticks`; // back ticks

\ - to escape special characters in the string. 

var str = " double " quote "; // Get an error

var str = " double \" quote ";

var str = "test \
test"; // Escaping new line

var str = "test";

str.length; // 4

str.charAt(0); // 't'

str.toUpperCase(); // 'TEST'

str.toLowerCase(); // 'test'

indexOf() method
---------------- 
- It is used to search substring in a string. 
- Returns index of first occurence of substring.

var str = "Widget with id Widget";
str.indexOf("Widget");  // 0
str.indexOf("id");  // 1
str.indexOf("test");  // -1 if it can't find the substring
str.indexOf("widget");  // -1 It do the case sensitive search. "widget" with small letter 'w' is not found.

If the word is found at first position of the string, it will return it's index 0. 

If we write the condition like below, it will fail in some cases.
if(str.indexOf("Widget")) { 
  // Do something if "Widget" is found in the string. 
  // It is found at 0th index. 
  // Even Widget is found at 0 index, if condition treats 0 as falsy value and don't execute the targeted code.
  console.log('This code do not execute, even for truthy condition');
}

So, while using indexOf() method, always we need to compare value with '-1'. 
if(str.indexOf("Widget") !== -1) { 
  // Do something if "Widget" is found in the string. 
  // 0 !== -1 -> true. So, code block will be executed
  console.log('This code executes on truthy condition');
}

str.indexOf("id", 2); // start search from index 2

str.lastIndexOf("id"); // Returns the index of last occurence of 'id' 

Three important methods to extract substring from a string
- substring
- substr
- slice

substring
---------
substring(start, end) - exclude the end position
start index and end index

var str = "stringify"
str.substring(0,1) // s

if we don't give end, it will take upto end

substr
------
substr(start [, length])
start index and how many characters to extract

var str = "stringify";
str = str.substr(2,4); // ring

omitting the length will lead to end of the string

slice
-----
slice(start [, end])
same as substring. Difference is handling the negative and overflow values.

"testme".substring(-2) // testme  In substring, negative values becomes 0
"testme".slice(-4)	// stme	 Count from the end of the string. Backward counting starts from -1. 's' at -4. So, start at 's' and take remaining all.

"testme".slice(1, -1) // estm Start at 1, end at -1 and exclude last char.
 
Type Conversions
================
To String
---------
var num = 123;
num.toString(); // Returns '123'

var value = true;
value.toString(); // Returns 'true'
String(value); // Returns 'true'

To Number
---------
There is no toNumber() method like toString(). We have to use Number() Constructor method to convert any value to Number.

var str = 'abc'; 
Number(str); // NaN

var str = '123';
Number(str); // 123

To Boolean
----------
Boolean(1); // true
Boolean(0); // false

Boolean("hello"); // true
Boolean(""); // false

Boolean("0"); // String "0" gives true
Boolean(" "); // spaces, also true (any non-empty string is true)

Double not(!!) – simple technique to convert any data type to Boolean.
str = 'test';
!str // false
!!str // true 

JSON <=> String
---------------
var obj = { "name":"John", "age":30, "city":"New York" };
var myJSON = JSON.stringify(obj);

var obj = JSON.parse(myJSON);

Functions
=========
// Named function 
function greet(name) { 
  console.log("Hi, "+name) 
} 

// Anonymous function
var greet = function(name) { 
  console.log("Hi, "+name) 
}

greet('John');

If a function don't return anything, by default "undefined" will be returned.

variables declared inside a function are local to that function.
Example: examples/scoping.html

Global variables can be accessed from anywhere in the code. 
Local variables can be accessed only within the function block.

Callback function
-----------------
We can pass one function as parameter to another function, 

function greet(name) { 
  console.log("Hi, "+name) 
} 

function greetUser(callback){
	callback("John");
}

greetUser(greet);

Here greet is a call back function.

Instead of passing function using it's name, we can define the function while passing it.

greetUser(function(name) { 
  console.log("Hi, "+name) 
});

Below are some example callback functions in javascript,

Array forEach() method accepts a callback function to handle the iterated elements.

var arr = ["Why", "learn", "JavaScript"];

arr.forEach(function(value, index){
  console.log(value);
  console.log(index);
});

Array map() method accepts a callback function to manipulate the elements.

Take each value and manipulate and returns the new array.
var arr = [4, 9, 16, 25];

var sqrts = arr.map(function(value, index){
	return Math.sqrt(value);
}); // [2, 3, 4, 5]

Array filter() method accepts a callback function to filter the array elements

Returns a new array of filtered values.
var ages = [4, 9, 16, 25];

var minorAges = ages.filter(function (value, index){
  return value <= 18;
}); // [4, 9, 16]

Ex: examples/ajax folder

Self calling functions / Immediately invoked functions
------------------------------------------------------
(function() {
  
	var a = 5, b=10;
  console.log(a, b);
	
})()

all the variables become local to that self calling function block only.

Constructor function: It is used to create objects.
---------------------
function User() {
	this.name = 'john';
	this.age = 30;
}
var user = new User();

instanceof operator
-------------------
- Used for checking type of custom objects
- Ex: user instanceof User // true

AJAX
====
AJAX - Asynchronous Javascript And Xml

It's not a programming language. It's a technique to hit server and change webpage content without re-loading page.

function getTodos(success, failure) {
  var xhttp = new XMLHttpRequest();
  xhttp.open("GET", "https://todos-api-dev.herokuapp.com/todos");
  xhttp.send();
  xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && this.status == 200) {
      success(this.responseText);
    } else {
      failure();
    }
  };
}

The onreadystatechange property specifies a function to be executed every time the status of the XMLHttpRequest object changes.
When readyState property is 4 and the status property is 200, the response is ready.

Different readyStates available are below,
0	UNSENT - Client has been created. open() not called yet.
1	OPENED - open() has been called.
2	HEADERS_RECEIVED - send() has been called, and headers and status are available.
3	LOADING	- Downloading; responseText holds partial data.
4	DONE - The operation is complete.

Ex: ajax folder

Arrays
======
var arr = []; // create array using square brackets
var arr = new Array(); // create using Array constructor method 

arr.length; // Gives array length
arr.push(elem); // Add element at end
arr.pop(); // Remove element at end

push and pop Operates at tail.
shift/unshift operates at head.

arr.unshift(elem) - Add new element at head.
arr.shift() - Remove the first elment.

var fruits = ["Apple", "Orange"];
var apple = fruits.shift(); // now we have only ["Orange"] left
fruits.unshift("Lemon"); // now got ["Lemon", "Orange"]

join() and split() methods 
--------------------------
var fruitsArr = ["Lemon","Apple","Orange","Peach"];

var fruitsStr = fruits.join(',');
console.log(fruitsStr); // "Lemon,Apple,Orange,Peach"

var fruitsStr = "Lemon,Apple,Orange,Peach";
var fruitsArr = fruitsStr.split(',');
console.log(fruitsArr); // ["Lemon","Apple","Orange","Peach"]

length
-------
var arr = [0, 1, 2, 3];
arr.length = 2; // trims the last two elements
arr.length = 20; // insert 18 undefined values

delete
------
var arr = ["Go", "to", "home"]
delete arr[1]; // ["Go", undefined, "home"]
console.log(arr[1]); // undefined

delete operatior just erase the value at specified index in array. It don't erase the memory reference.

*** splice ***
--------------
We can perform any kind of manipulation on an array using splice method. 

It mutate/change the array.

arr.splice(index, deleteCount, [elem1, ..., elemN]);
index - At what index to start
deleteCount - How many elements to delete
[elem1, ..., elemN] - Elements to insert after deletion

var arr = ["Go", "to", "home"];
var removedElements = arr.splice(1, 1);  // remove 1 element starting at index 1
console.log(arr); // ["Go", "home"]

splice() method returns array of removed elements.

replace elements:
var arr = ["Go", "to", "home", "now"];
arr.splice(0, 3, "Come", "here"); // remove first 3 elements and add two
console.log(arr); // ["Come", "here", "now"]

To insert elements, just set deleteCount to 0
var arr = ["Go", "to", "home"];
arr.splice(2, 0, "my", "sweet"); // from 2nd position, delete 0 elements and insert "my", "sweet"
console.log(arr); // "Go", "to", "my", "sweet", "home"

Negative index counts from array end
var arr = [1, 2, 5];
arr.splice(-1, 0, 3, 4); // At element -1, delete 0 elements and insert 3 and 4
console.log(arr);  // 1,2,3,4,5

Array slice
-----------
Array slice() method is used to extract sub array from array. Works same as string slice() method.

It don't mutate/change the array. it will return the sliced elements.

var arr = ["Why", "learn", "JavaScript"];
var subArr = arr.slice(0, 2); // starting at 0 index, end at 2 index and omit last value 
console.log(subArr); // ["Why", "learn"]
console.log(arr); // ["Why", "learn", "JavaScript"]. Not changed/mutated.

If we miss the end index, it will take until end.

forEach()
---------
Used to iterate through every element.
var arr = ["Why", "learn", "JavaScript"];

arr.forEach(function(value, index){
  console.log(value);
  console.log(index);
});

map()
-----
Used to take each value and manipulate and returns the new array.

Don't mutate the array. Return a new array with manipulated values.

var arr = [4, 9, 16, 25];

var sqrts = arr.map(function(value, index){
	return Math.sqrt(value);
}); // [2, 3, 4, 5]

filter()
--------
Used to filter an array based on some condition. Returns a new array of filtered values.

Don't mutate the array. Return a new array with filtered values.

var ages = [4, 9, 16, 25];

var minorAges = ages.filter(function (value, index){
  return value <= 18;
}); // [4, 9, 16]

reverse()
--------- 
arr.reverse() reverse the array. 

Mutate the array. 

var ages = [4, 9, 16, 25];
ages.reverse();
console.log(ages); // [25, 16, 9, 4]

Objects
=======
var user = new Object(); // create object using constructor method
var user = { }; // create object using curly braces
user.name = 'John';
user.age = 25;
console.log(user.name); // dot notation for accessing an object property

delete user.name; // delete the property reference also.

We can also use [] to access properties of object.
user['name'] // John

var key = 'name';
user.key // undefined
user[key] // John

var box = {
	width: 200,
	length: 300,
	shapes: ["square","rectangle"],
	draw: function(){
	
	},
	type: {}
} 

We can place any kind of data in an object.

Non-existing properties returns undefined.
box.area  // returns undefined

JSON: JavaScript Object Notation
-----
- The notation of a javascript object. 
- The format of a javascript object. 

{name: 'john', age: 30, skills: ['js', 'java', 'ts', 'angular']}

window Object
=============
window is the global object in browser.

var a = 10;
Here 'a' will become property in window object. We can access it as 'window.a' OR just 'a'

Object.keys() & Object.values() methods
---------------------------------------
var box = {
	width: 200,
	length: 300,
	shapes: ["square","rectangle"],
	draw: function(){
	
	},
	type: {}
} 

Object.keys(box) returns an array with all keys of box object.

Object.values(box) returns an array with all values of box object.

To check an object is empty or not, check the length of Object.keys(box) array.

var user = {};
if(user) {
	console.log('not empty');
} // If can't evaluate that an object is empty or not.

if(Object.keys(user).length) {
  // user is not an empty object
}

'this' keyword behaviour in functions
=====================================
This behaviour will change depends on context.

- In a regular function, this will become window object
function test(){
  console.log(this); // this = window object
}

- In constructor function this will represent the current object.

function User(name) {
  this.name = name;
 
  this.sayHi = function() {
    console.log("I am "  + this.name);
  };
}

var userObj = new User("John");
userObj.sayHi(); // I am John

- The value of this in a function is dynamic. 
- It is determined when function is called, not when it is declared.

- In an object method, this will become current object.
var userObj = {
  name: 'John',
  printName: function(){
    console.log(this.name);
  }
};
userObj.printName(); // 'this' becomes userObj here. 

*** Simply remember, 'this' in a normal function represents 'window' object. In all other cases, it represents the current object.

DOM
===
Document Object Model (DOM)
- DOM allows us to access contents of a web page, modify elements, delete elements etc... other operations through javascript programs.
- DOM represents webpage as a tree. The tree is made up of parent-child relationships, a parent can have one or many children nodes.

window.document is the global object for DOM. We can access it as window.document OR document.

- Every element/tag of a webpage is internally represented as an object. 
- 'document' object contains references of all elements in object format.

Webpage Traversing 
------------------
Webpage Traversing means traveling in a webpage from one element to another element programatically.

'document' object contains many methods and properties to traverse a webpage.

document.body
document.body.childNodes
document.body.firstChild
document.body.lastChild

dir - method
------------
dir() is a chrome console method to expand and see the list of properties available on a DOM object.

HTML:
<div id="logo">div for logo</div>

Javascript: 
var logo = document.getElementById('logo'); // access element with id 'logo'
console.log(logo); // variable 'logo' contains DOM object of element with id 'logo'. But, console.log print html format of that reference element.

dir(logo); // dir() method prints the object format of that element. This method works only in chrome console.

document.getElementById('id') method
------------------------------------
<div id="info">Info</div>

<script>
  var div = document.getElementById('info');
  console.log(div.innerHTML);
</script>

document.getElementsByTagName('tagName')
----------------------------------------
<table id="myTable">
  <tr>
    <td>Your age:</td>

    <td>
      <label>
        <input type="radio" name="age" value="young" checked/> under 18
      </label>
      <label>
        <input type="radio" name="age" value="mature"/> from 18 to 50
      </label>
      <label>
        <input type="radio" name="age" value="senior"/> older than 60
      </label>
    </td>
  </tr>
</table>

<script>
  var elements = document.getElementsByTagName('input'); // Returns a nodelist of 'input' elements
  console.log(elements);
  for(var i=0; i<elements.length; i++) {
    var input = elements[i]; 
    console.log(input.value+': '+input.checked);
  }
</script>

document.getElementsByClassName('className')
--------------------------------------------
<div class="abc def test">some text1</div>
<div class="abc">some text2</div>
<script>
console.log(document.getElementsByClassName('abc')); // Returns a nodelist of elements with class name 'abc'
</script>

document.querySelector(), querySelectorAll()
--------------------------------------------
The methods querySelector and querySelectorAll allow to select elements by CSS3 query.

document.querySelector() - returns the first matched element.
document.querySelectorAll() - returns all matched elements with the query.

<ul>
  <li>The</li>
  <li>Test</li>
</ul>
<ul>
  <li>Is</li>
  <li>Passed</li>
</ul>

<script>
  var elements = document.querySelectorAll('UL > LI:last-child'); 

  for(var i=0; i<elements.length; i++) {
    console.log(elements[i].innerHTML );
  }
</script>

var elem = document.querySelector('ul');
console.log(elem);

Events
======
We can bind events to the elements in 3 ways,
1. With element attribute
2. With DOM-object property
3. Using addEventListener method

Handle events with element attribute
------------------------------------
<input id="b1" value="Click me" onclick="alert('Thanks!');" type="button"/>

- Inside an event handler, this references the current element.

<button onclick="alert(this.innerHTML)">Click me to see me</button>

- 'event' object contains the entire information about the event.

<button onclick="console.log(event)">Click me to see me</button>

Handle events with DOM-object property
--------------------------------------
<input id="myElement" type="button" value="Press me"/>
<script>
document.getElementById('myElement').onclick = function(event) {
  console.log('Thanks');
  console.log(event);
}
</script>

Handle events using addEventListener() method
---------------------------------------------
Ex: event-listener.html

// Add event to element
elem.addEventListener(type, handlerFunction)

// Remove event to element
elem.removeEventListener(type, handlerFunction)

<script>
    document.getElementById("myDIV").addEventListener("mousemove", myFunction);

    function myFunction(event) {
        console.log(event);
        document.getElementById("demo").innerHTML = Math.random();
    }

    function removeHandler() {
        document.getElementById("myDIV").removeEventListener("mousemove", myFunction);
    }
</script>

mousedown - Triggered by an element when a mouse button is pressed down over it
mouseup   - Triggered by an element when a mouse button is released over it
mouseove  - Triggered by an element when the mouse comes over it
mouseout  - Triggered by an element when the mouse goes out of it
mousemove - Triggered by an element on every mouse move over it.
click     - Triggered by a mouse click: mousedown and then mouseup over an element
contextmenu - Triggered by a right-button mouse click over an element.
dblclick  - Triggered by two clicks within a short time over an element
keydown   - A key is pressed down.
keypress  - A character key is pressed.
keyup     - A key is released.

Event Propagation and Prevent default
=====================================
Examples: event-propagation.html

// To prevent default action. Ex: Prevent navigation of <a> tag, form submission etc..
event.preventDefault();

// Capturing and bubling events.
An event contains 3 phases.
1. Capturing
2. Targeting
3. Bubling

Capturing: The event is first captured by the outermost element and propagated to the inner elements.
Html -> Body -> Form -> Div -> P

Tarrgeting means traverse through the DOM and find Targeted element.

Bubling: When an event happens on an element, it first runs the handlers on it, then on its parent, then all the way up to the ancestors.
P -> Div -> Form

event.stopPropagation(); // To prevent propagation.

Timing methods
==============
Ex: timing.html

setTimeout, clearTimeOut
------------------------
setTimeout function is used to execute a function or some statements after some specified time.

var timeOutRef = setTimeout(function() {
    document.getElementById('demo1').innerText = "Text changed";
}, 3000);

function stop() {
    clearTimeout(timeOutRef);
}

setInterval, clearInterval
--------------------------
setInterval function is used to execute a function or some statements repeatedly on specified time interval.

var i = 0;
var intervalRef = setInterval(function(){
    i++;
    document.getElementById('count').innerText = i;
}, 1000);

function stopCounting() {
    clearInterval(intervalRef);
}

localStorage
============
'localStorage' is a global object in javascript. We can access it by 'window.localStorage' or 'localStorage'.

localStorage is domain specific. We can't access localStorage of one domain from another domain.

We store the data as key, value pairs in localStorage. 

localStorage.setItem("key", "value");

localStorage.setItem("name", "John"); // To store data

var lastname = localStorage.getItem("name"); // To retrieve data

localStorage.removeItem("key"); // To remove data

- localStorage only store strings
If we store object in localStorage and trying to access it, we will get "[object Object]". So, we need to stringify the objects and store it in localStorage.

WRONG:
localStorage.setItem('user', {name: 'John', age: 25});
localStorage.getItem('user'); // "[object Object]"

CORRECT:
localStorage.setItem('user', JSON.stringify({name: 'John', age: 25}));
var user = localStorage.getItem('user'); // "{name: 'John', age: 25}"
user = JSON.parse(user); // {name: 'John', age: 25}

NPM
===
> npm init
- Initialize npm on a repository. Configure npm on a normal folder. Generates package.json file in it.

> npm install jquery
> npm i jquery
> npm install jquery --save // Old NPM version(<5)
- Install jquery in project level and list under dependencies in package.json file

> npm install jasmine -D
> npm install jasmine --save-dev // Old NPM version(<5)
- Install jasmine as dev dependency and list under 'devDependencies' in package.json file

> npm install -g @angular/cli 
- Globally install angular cli tool.
- We can access 'ng' command anywhere in system after global installation.

Specifying version in package.json
----------------------------------
> npm install jquery@2.2.4 
- Install specific version

> "jquery": "*" 
- "*" means any version

> "jquery": "latest" 
- Install the latest version

> "jquery": "1.x"
> "jquery": "^1.0.0" 
- Install the latest minor and patch versions. 
- Latest in 1.x.x but not 2.0.0

> "jquery": "~1.11"  
- Install the latest patch version.
- Upto 1.11.x but not 1.12.0

package-lock.json file
----------------------
- Help to install same version of dependency across all team members.
- It will record which version of dependency installed for the first installer. It make sures to install the same version for all other team mates.
- We need to push this file to git repo.
- For example, If I specify "jquery": "*" and jquery 2.0.0 installed for me. package-lock.json file will record my version and install the same for all other team mates. Otherwise, each team mate get different version and causing different different bugs. 

Sites to Refer:
===============
https://www.w3schools.com/

http://javascript.info/